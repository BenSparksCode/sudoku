{"version":3,"sources":["util/SudokuSolver.js","contexts/SudokuContext.js","components/navBar/NavBar.js","components/sudokuBoard/SudokuBoard.js","components/controls/Controls.js","App.js","serviceWorker.js","index.js"],"names":["solveSudoku","board","isBoardFull","row","col","found","i","j","possibleVals","getPossibleValues","newBoard","push","res","solved","length","some","n","Array","fill","lastRow","Math","ceil","lastCol","shuffle","array","floor","random","temp","SudokuContext","createContext","testGrid","initialSudokuState","initialBoard","workingBoard","difficulty","SudokuContextProvider","props","useState","sudokuState","setSudokuState","setWorkingBoard","Provider","value","changeCellValue","newVal","gridCopy","generateNewBoard","templateRow","generateBoard","newBoardCopy","solveBoard","newGrid","checkSolution","JSON","stringify","sort","console","log","tempCol","map","subgrid","tempGrid","r","c","checkSolved","Toastify","text","duration","newWindow","close","gravity","position","backgroundColor","showToast","setDifficulty","val","children","NavBar","className","SudokuSquare","useContext","editable","onKeyPress","e","numEntered","key","match","parseInt","keyPressed","tabIndex","SudokuSubGrid","colVals","gridNum","gridValues","rowVals","x","SudokuBoard","nums","slice","Controls","settingsVisible","setSettingsVisible","onClick","isOpened","type","min","max","class","id","onChange","target","sliderChanged","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.55e79fd9.chunk.js","sourcesContent":["export const generateBoard = (difficulty) => {\r\n    //difficulty = no. of cells removed\r\n    //min = 10, max = 64\r\n\r\n    let newBoard = [\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n    ]\r\n\r\n    let templateRow = [1,2,3,4,5,6,7,8,9]\r\n\r\n    //Generating 3 random diagonal subgrids as the seed board\r\n    shuffle(templateRow)\r\n    for (let i = 0; i < 3; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n            newBoard[i][j] = templateRow[i*3+j]\r\n        }\r\n    }\r\n\r\n    shuffle(templateRow)\r\n    for (let i = 0; i < 3; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n            newBoard[3+i][3+j] = templateRow[i*3+j]\r\n        }\r\n    }\r\n\r\n    shuffle(templateRow)\r\n    for (let i = 0; i < 3; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n            newBoard[6+i][6+j] = templateRow[i*3+j]\r\n        }\r\n    }\r\n\r\n    //Solving new random board\r\n    newBoard = solveSudoku(newBoard).board\r\n\r\n    //Removing values from board randomly\r\n    for (let i = 1; i < 82 ; i++) {\r\n            templateRow[i] = i\r\n    }\r\n\r\n    shuffle(templateRow)\r\n\r\n    let row = 0\r\n    let col = 0\r\n\r\n    for (let i = 0; i < difficulty; i++) {\r\n        row = Math.ceil(templateRow[i]/9) - 1\r\n        col = templateRow[i]%9\r\n        newBoard[row][col] = 0\r\n    }\r\n\r\n    return newBoard\r\n}\r\n\r\nexport const solveSudoku = (board) => {\r\n    //board = 9x9 int array\r\n\r\n    // Terminal condition - board is full - solved\r\n    if (isBoardFull(board)) {\r\n        return {\"board\": board, \"solved\":true }\r\n    }\r\n    //Board is not full - not solved\r\n    //Find 1st empty cell\r\n    let row, col\r\n    let found = false\r\n    for (let i = 0; i < 9; i++) {\r\n        if (found) {\r\n            break\r\n        }\r\n\r\n        for (let j = 0; j < 9; j++) {\r\n            if (board[i][j] === 0) {\r\n                row = i\r\n                col = j\r\n                found = true\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    //Get possible values for empty cell\r\n    let possibleVals = getPossibleValues(board, row, col)\r\n\r\n    //Trying to solve with all possible values for this cell\r\n    for (let i = 0; i < 9; i++) {\r\n        if (possibleVals[i] !== 0) {\r\n            board[row][col] = i + 1\r\n\r\n            //Testing deep cloning\r\n            let newBoard = []\r\n            for (let i = 0; i < 9; i++) {\r\n                newBoard.push([...board[i]])\r\n            }\r\n\r\n            const res = solveSudoku(newBoard)\r\n            if(res.solved){\r\n                return res\r\n            }\r\n        }\r\n    }\r\n\r\n    //Resetting cell to blank, backtracking to try different values in prev cells\r\n    board[row][col] = 0\r\n    return {\"board\":board, \"solved\":false}\r\n}\r\n\r\nconst isBoardFull = (board) => {\r\n    //Check for 0s (blanks) in board - false if any blanks\r\n    for (let i = 0; i < board.length; i++) {\r\n        //Checks every row for 0s - returns false if 0 found\r\n        if (board[i].some((n) => n === 0)) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nconst getPossibleValues = (board, row, col) => {\r\n    let possibleVals = new Array(9).fill(1)\r\n\r\n    //1. Check impossible values in ROW\r\n    for (let i = 0; i < 9; i++) {\r\n        if (board[row][i] !== 0) {\r\n            possibleVals[board[row][i] - 1] = 0\r\n        }\r\n    }\r\n\r\n    //2. Check impossible values in COLUMN\r\n    for (let i = 0; i < 9; i++) {\r\n        if (board[i][col] !== 0 && possibleVals[board[i][col] - 1] !== 0) {\r\n            possibleVals[board[i][col] - 1] = 0\r\n        }\r\n    }\r\n\r\n    //3. Check impossible values in SUBGRID\r\n    const lastRow = Math.ceil((row + 0.001) / 3) * 3\r\n    const lastCol = Math.ceil((col + 0.001) / 3) * 3\r\n\r\n    for (let i = lastRow - 3; i < lastRow; i++) {\r\n        for (let j = lastCol - 3; j < lastCol; j++) {\r\n            if (board[i][j] !== 0 && possibleVals[board[i][j] - 1] !== 0) {\r\n                possibleVals[board[i][j] - 1] = 0\r\n            }\r\n        }\r\n    }\r\n\r\n    return possibleVals\r\n}\r\n\r\n//Randomly shuffles array - for generating new games\r\nconst shuffle = (array) => {\r\n    for (var i = array.length - 1; i > 0; i--) {\r\n        var j = Math.floor(Math.random() * (i + 1));\r\n        var temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n}\r\n\r\nexport const checkSolved = (board) => {\r\n    const templateRow = JSON.stringify([1,2,3,4,5,6,7,8,9])\r\n\r\n    // 1. Check ROWS\r\n    for (let i = 0; i < 9; i++) {\r\n        if(JSON.stringify([...board[i]].sort()) !== (templateRow)){\r\n            console.log(JSON.stringify([...board[i]].sort()));\r\n            console.log((templateRow));\r\n            console.log(\"Failed on row \", i);\r\n            return false\r\n        }\r\n    }\r\n\r\n    //2. Check COLUMNS\r\n    for (let i = 0; i < 9; i++) {\r\n        const tempCol = board.map((row)=>{\r\n            return row[i]\r\n        })\r\n\r\n        if(JSON.stringify(tempCol.sort()) !== (templateRow)){\r\n            console.log(JSON.stringify(tempCol.sort()));\r\n            console.log((templateRow));\r\n            console.log(\"Failed on col \", i);\r\n            return false\r\n        }\r\n    }\r\n\r\n    //3. Check SUBGRIDS\r\n    for (let subgrid = 0; subgrid < 9; subgrid++) {\r\n        let tempGrid = []\r\n\r\n        //building subgrid array\r\n        for (let r = 0; r < 3; r++) {\r\n            for (let c = 0; c < 3; c++) {\r\n                tempGrid.push(board[r + (Math.floor(subgrid / 3) * 3)][c + (subgrid%3)*3])\r\n            }\r\n        }\r\n\r\n        if(JSON.stringify(tempGrid.sort()) !== (templateRow)){\r\n            console.log(JSON.stringify(tempGrid.tempGrid()));\r\n            console.log((templateRow));\r\n            console.log(\"Failed on subgrid \", subgrid);\r\n            return false\r\n        }\r\n    }\r\n\r\n    //If check hasn't failed yet then it's solved\r\n    return true\r\n}","import React, { createContext, useState } from 'react'\r\nimport Toastify from 'toastify-js'\r\n\r\nimport { solveSudoku, generateBoard, checkSolved } from '../util/SudokuSolver'\r\n\r\nexport const SudokuContext = createContext()\r\n\r\nconst testGrid = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n]\r\n\r\nconst initialSudokuState = {\r\n    initialBoard: testGrid,\r\n    workingBoard: testGrid,\r\n    difficulty: 9,\r\n    solved: false\r\n}\r\n\r\n\r\nconst SudokuContextProvider = (props) => {\r\n\r\n    const [sudokuState, setSudokuState] = useState(initialSudokuState)\r\n\r\n    const setWorkingBoard = (board) => {\r\n        setSudokuState({ ...sudokuState, ...{ workingBoard: board } })\r\n    }\r\n\r\n    const changeCellValue = (row, col, newVal) => {\r\n        let gridCopy = [...sudokuState.workingBoard]\r\n        gridCopy[row - 1][col - 1] = newVal\r\n        setWorkingBoard(gridCopy)\r\n    }\r\n\r\n    const setDifficulty = (val) => {\r\n        setSudokuState({ ...sudokuState, ...{ difficulty: val } })\r\n    }\r\n\r\n    const generateNewBoard = () => {\r\n        const newBoard = generateBoard(sudokuState.difficulty)\r\n        let newBoardCopy = []\r\n        for (let i = 0; i < 9; i++) {\r\n            newBoardCopy.push([...newBoard[i]])\r\n        }\r\n\r\n        setSudokuState({\r\n            ...sudokuState, ...{\r\n                initialBoard: newBoard,\r\n                workingBoard: newBoardCopy,\r\n                solved: false\r\n            }\r\n        })\r\n    }\r\n\r\n    const solveBoard = () => {\r\n        let newGrid = []\r\n        for (let i = 0; i < 9; i++) {\r\n            newGrid.push([...sudokuState.workingBoard[i]])\r\n        }\r\n        const res = solveSudoku(newGrid)\r\n\r\n        if (res.solved) {\r\n            setSudokuState({ ...sudokuState, ...{ solved: true, workingBoard: res.board } })\r\n        } else {\r\n            setWorkingBoard(res.board)\r\n        }\r\n    }\r\n\r\n    const checkSolution = () => {\r\n        let newGrid = []\r\n        for (let i = 0; i < 9; i++) {\r\n            newGrid.push([...sudokuState.workingBoard[i]])\r\n        }\r\n        const solved = checkSolved(newGrid)\r\n        if (solved) {\r\n            setSudokuState({ ...sudokuState, ...{ solved: true } })\r\n            //Toast triggered here\r\n            Toastify({\r\n                text: \"Correct!\",\r\n                duration: 2000,\r\n                newWindow: true,\r\n                close: false,\r\n                gravity: \"top\", // `top` or `bottom`\r\n                position: 'center', // `left`, `center` or `right`\r\n                backgroundColor: \"green\",\r\n              }).showToast();\r\n        } else {\r\n            setSudokuState({ ...sudokuState, ...{ solved: false } })\r\n            Toastify({\r\n                text: \"Wrong, try again.\",\r\n                duration: 2000,\r\n                newWindow: true,\r\n                close: false,\r\n                gravity: \"top\", // `top` or `bottom`\r\n                position: 'center', // `left`, `center` or `right`\r\n                backgroundColor: \"red\",\r\n              }).showToast();\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <SudokuContext.Provider value={{ sudokuState, changeCellValue, generateNewBoard, solveBoard, checkSolution, setDifficulty }}>\r\n            {props.children}\r\n        </SudokuContext.Provider>\r\n    )\r\n}\r\n\r\nexport default SudokuContextProvider\r\n","import React from 'react'\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <div className=\"navbar\">\r\n            <h1>Sudoku</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar;\r\n\r\n","import React, { useContext } from 'react'\r\nimport { SudokuContext } from '../../contexts/SudokuContext'\r\n\r\nconst SudokuSquare = ({ row, col, value }) => {\r\n    const { sudokuState, changeCellValue } = useContext(SudokuContext)\r\n    const editable = sudokuState.initialBoard[row - 1][col - 1] === 0\r\n\r\n    const keyPressed = (e) => {\r\n        const numEntered = e.key\r\n\r\n        if (numEntered.match(\"^[0-9]$\")) {\r\n            changeCellValue(row, col, parseInt(numEntered))\r\n        } else {\r\n            return\r\n        }\r\n    }\r\n\r\n    if (editable) {\r\n        return (\r\n            <div onKeyPress={e => keyPressed(e)} tabIndex={0} className={\"editable sudoku-square\"}>\r\n                {value === 0 ? \"\" : value}\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div tabIndex={0} className={\"uneditable sudoku-square\"}>\r\n                {value === 0 ? \"\" : value}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst SudokuSubGrid = ({ gridNum }) => {\r\n\r\n    const { sudokuState } = useContext(SudokuContext)\r\n    const gridValues = sudokuState.workingBoard\r\n    const solved = sudokuState.solved\r\n\r\n    const rowVals = [1, 2, 3].map(x => x + 3 * (Math.floor(gridNum / 3 - 0.01)))\r\n    let colVals\r\n    if (gridNum % 3 === 0) {\r\n        colVals = [7, 8, 9]\r\n    } else {\r\n        colVals = [1, 2, 3].map(x => x + 3 * ((gridNum % 3) - 1))\r\n    }\r\n\r\n    return (\r\n        <div className={solved ? \"sudoku-subgrid-solved\" : \"sudoku-subgrid\"}>\r\n            <div className=\"sudoku-subgrid-row\">\r\n                {colVals.map(c => {\r\n                    return (\r\n                        <SudokuSquare row={rowVals[0]} col={c} value={gridValues[rowVals[0] - 1][c - 1]} />\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className=\"sudoku-subgrid-row\">\r\n                {colVals.map(c => {\r\n                    return (\r\n                        <SudokuSquare row={rowVals[1]} col={c} value={gridValues[rowVals[1] - 1][c - 1]} />\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className=\"sudoku-subgrid-row\">\r\n                {colVals.map(c => {\r\n                    return (\r\n                        <SudokuSquare row={rowVals[2]} col={c} value={gridValues[rowVals[2] - 1][c - 1]} />\r\n                    )\r\n                })}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst SudokuBoard = () => {\r\n    const { sudokuState } = useContext(SudokuContext)\r\n    const solved = sudokuState.solved\r\n\r\n    const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\n    return (\r\n        <div className={(solved ? \"solved\" : \"unsolved\") + \" sudoku-board\"}>\r\n            <div className=\"sudoku-board-row\">\r\n                {nums.slice(0, 3).map(n => {\r\n                    return (\r\n                        <SudokuSubGrid gridNum={n} />\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className=\"sudoku-board-row\">\r\n                {nums.slice(3, 6).map(n => {\r\n                    return (\r\n                        <SudokuSubGrid gridNum={n} />\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className=\"sudoku-board-row\">\r\n                {nums.slice(6, 9).map(n => {\r\n                    return (\r\n                        <SudokuSubGrid gridNum={n} />\r\n                    )\r\n                })}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SudokuBoard;","import React, { useContext, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\n\r\nimport { SudokuContext } from '../../contexts/SudokuContext'\r\n\r\nconst Controls = () => {\r\n\r\n    const { sudokuState, generateNewBoard, solveBoard, checkSolution, setDifficulty } = useContext(SudokuContext)\r\n    const difficulty = sudokuState.difficulty\r\n    const [settingsVisible, setSettingsVisible] = useState(false)\r\n\r\n    const toggleSettings = () => {\r\n        setSettingsVisible(!settingsVisible)\r\n    }\r\n\r\n    const sliderChanged = (e) => {\r\n        setDifficulty(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"all-controls\">\r\n            <div className=\"controls-container\">\r\n                <button className=\"btn btn-new\" onClick={generateNewBoard}>New</button>\r\n                <button className=\"btn btn-solve\" onClick={solveBoard}>Solve</button>\r\n                <button className=\"btn btn-check\" onClick={checkSolution}>Check</button>\r\n            </div>\r\n\r\n            <div className=\"control-options-container\">\r\n                <button className=\"btn \" onClick={toggleSettings}> Settings &#x25BE; </button>\r\n                <Collapse isOpened={settingsVisible}>\r\n                    <div className=\"slider-container\">\r\n                        <p>Difficulty: {Math.floor(((difficulty-8)/56)*100)}%</p>\r\n                        <input type=\"range\" min=\"9\" max=\"64\" value={difficulty} class=\"slider\" id=\"myRange\" onChange={e => sliderChanged(e)}></input>\r\n                    </div>\r\n                </Collapse>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Controls;","import React from 'react';\n\nimport SudokuContextProvider from './contexts/SudokuContext'\n\nimport NavBar from './components/navBar/NavBar'\nimport SudokuBoard from './components/sudokuBoard/SudokuBoard'\nimport Controls from './components/controls/Controls'\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n\n      <SudokuContextProvider>\n        <SudokuBoard />\n        <Controls />\n      </SudokuContextProvider>\n      \n      \n    </div>\n  );\n}\n\nexport default App;\n\n\n//VS CODE SHORTCUTS:\n//nfn - named arrow function\n//rafc - arrow functional component\n\n// TODO\n// - Add more parts to Context\n// - Add toasts\n// - Add CSS for ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}